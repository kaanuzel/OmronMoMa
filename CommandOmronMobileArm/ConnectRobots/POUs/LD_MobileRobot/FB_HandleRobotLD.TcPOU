<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_HandleRobotLD" Id="{e4808b3d-0c6b-49e6-8b5c-04e3d8ee2ec8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HandleRobotLD
VAR_INPUT

END_VAR
VAR_OUTPUT
	(*--------------- Class Method Returns---------------*)
	
	// GetRobotIP
	{attribute 'OPC.UA.DA':='0'}
	sGetRobotIP : STRING(255); //Returns the IP address of the robot upon request. 
	

END_VAR
VAR
	{attribute 'OPC.UA.DA':='0'}
	sStringsReceivedLD 	: STRING(7680); //String Received from LD
	{attribute 'OPC.UA.DA':='0'}
	sStringsWriteLD 		: T_MaxString; //String to be sent to LD
	
	//variable to request status every 500ms;
	{attribute 'OPC.UA.DA':='0'}
	tiktak : TON;
	{attribute 'OPC.UA.DA':='0'}
	bRequestStatus : BOOL := FALSE;
	
	//Variable to set the password in the begining automatically 
	{attribute 'OPC.UA.DA':='0'}
	bSetPassword : BOOL := TRUE;
	
	//Variable to assign status values 
	{attribute 'OPC.UA.DA':='0'}
	sStatusReceivedLD : STRING(255);
	{attribute 'OPC.UA.DA':='0'}
	sLocation : STRING;
	{attribute 'OPC.UA.DA':='0'}
	sLocationYR : STRING;
	
	//FB to start TCP/IP Client 
	{attribute 'OPC.UA.DA':='0'}
	fbSocketLD : FB_SocketLD;
	
	//Variable for Command Window Access
	{attribute 'OPC.UA.DA':='0'}
	bCallingCommandWindow : BOOL;
	
	
	//Calling class methods 
	{attribute 'OPC.UA.DA':='0'}
	bCallingMethods : BOOL; //If any method is called
	{attribute 'OPC.UA.DA':='0'}
	bGetRobotIP : BOOL;
	{attribute 'OPC.UA.DA':='0'}
	smallString : STRING(255);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*--------------- Return the answer for class methods, external access---------------*)

smallString := GVL_MobileManipulator.statusReceivedLD;
IF bCallingMethods THEN
	IF LEFT(smallString,13) = 'Info: RobotIP' THEN // called: getRobotIP
		sGetRobotIP := MID(smallString,12,15);
		bCallingMethods := FALSE;
	ELSIF LEFT(smallString,5) = 'Going' THEN // called: gotoPoint
		GVL_MobileManipulator.stMobileRobotObjectLD.bBusyLD := TRUE;
	ELSIF LEFT(smallString,7) = 'Arrived' THEN //finished: gotoPoint
		bCallingMethods := FALSE;
		GVL_MobileManipulator.stMobileRobotObjectLD.bBusyLD := FALSE;
		
	END_IF
END_IF


(*--------------- Allow access from command window if requested---------------*)
bCallingCommandWindow := GVL_CommandWindow.bCmdWriteStringToLD90;
IF bCallingCommandWindow THEN 
	GVL_CommandWindow.bCmdWriteStringToLD90 := FALSE;
	bCallingCommandWindow := FALSE;
	fbSocketLD.bStartWritingString := TRUE;
	GVL_MobileManipulator.statusWriteLD := GVL_CommandWindow.sWriteCommand;

END_IF


(*--------------- Request the robot status every 500ms ---------------*)
IF tiktak.Q THEN
	IF bRequestStatus THEN 
		GVL_MobileManipulator.statusWriteLD := 'oneLineStatus'; 
		fbSocketLD.bStartWritingString :=TRUE;
		
		bRequestStatus := FALSE;
	END_IF
	tiktak(IN:=FALSE);
ELSE
	tiktak(IN:= TRUE,PT:=T#500MS);
	IF NOT bRequestStatus AND NOT bCallingMethods AND NOT bCallingCommandWindow THEN
		
		fbSocketLD.bStartWritingString :=FALSE;
		bRequestStatus := TRUE;
	END_IF
END_IF




(*--------------- Update the robot status ---------------*)
IF LEFT(GVL_MobileManipulator.statusReceivedLD,6) = 'Status' THEN
	sStatusReceivedLD := GVL_MobileManipulator.statusReceivedLD;
END_IF
GVL_MobileManipulator.stMobileRobotObjectLD.sStatus := MID(sStatusReceivedLD,FIND(sStatusReceivedLD,'StateOfCharge')-10,9);
IF LEFT(GVL_MobileManipulator.stMobileRobotObjectLD.sStatus,5) = 'Error' THEN
	GVL_MobileManipulator.stMobileRobotObjectLD.bErrorLD := TRUE;
ELSE 
	GVL_MobileManipulator.stMobileRobotObjectLD.bErrorLD := FALSE;
END_IF
GVL_MobileManipulator.stMobileRobotObjectLD.fBattery := STRING_TO_REAL(MID(sStatusReceivedLD,4,FIND(sStatusReceivedLD,'StateOfCharge')+15));
sLocation:= MID(sStatusReceivedLD,FIND(sStatusReceivedLD,'Temperature')-FIND(sStatusReceivedLD,'Location')-10,FIND(sStatusReceivedLD,'Location')+10);
GVL_MobileManipulator.stMobileRobotObjectLD.fPositionX :=  STRING_TO_REAL(LEFT(sLocation,FIND(sLocation,' ')));
sLocationYR := RIGHT(sLocation, LEN(sLocation)-FIND(sLocation,' '));
GVL_MobileManipulator.stMobileRobotObjectLD.fPositionY := STRING_TO_REAL(LEFT(sLocationYR,FIND(sLocation,' ')));
GVL_MobileManipulator.stMobileRobotObjectLD.fRotationTheta := STRING_TO_REAL(RIGHT(sLocationYR, LEN(sLocationYR)-FIND(sLocationYR,' ')));
GVL_MobileManipulator.stMobileRobotObjectLD.nTemperature := STRING_TO_INT(MID(sStatusReceivedLD,2,FIND(sStatusReceivedLD,'Temperature')+13));
(*--------------- END OF Update the robot status ---------------*)


(*--------------- Call TCP/IP Client ---------------*)
fbSocketLD();


(*--------------- Enter the password for the remote server, only once in the beginning ---------------*)
IF bSetPassword THEN
	GVL_MobileManipulator.statusWriteLD := 'admin';
	fbSocketLD.bStartWritingString :=TRUE;
	bSetPassword:=FALSE;
END_IF



]]></ST>
    </Implementation>
    <Method Name="getRobotIP" Id="{26a78548-d92c-4780-adfb-e7b25572327e}">
      <Declaration><![CDATA[//This method is called to ask the IP address of the robot to the robot server. Answer will be received by the function block itself. 
{attribute 'TcRpcEnable':='1'}
METHOD getRobotIP : BOOL //FALSE: Finished
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[


fbSocketLD.bStartWritingString := TRUE;
GVL_MobileManipulator.statusWriteLD := 'getInfo RobotIP';
bRequestStatus := FALSE; //don't allow requesting status this cycle in case they overlapped



bCallingMethods := TRUE;





getRobotIP := TRUE; //function returns false after execution]]></ST>
      </Implementation>
    </Method>
    <Method Name="goToPoint" Id="{4225b413-5d12-43cf-be36-7dfed9df80af}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD goToPoint : BOOL
VAR_INPUT
	x : INT;
	y : INT;
	theta : INT;
	
END_VAR
VAR
	temp : STRING;
	temp1 : STRING;
	temp2 : STRING;
	temp3 : STRING;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[





fbSocketLD.bStartWritingString := TRUE;

temp := CONCAT(TO_STRING(x), ' ');
temp1 := CONCAT(temp, TO_STRING(y));
temp2 := CONCAT(temp1, ' ');
temp3 := CONCAT(temp2, TO_STRING(theta));

GVL_MobileManipulator.statusWriteLD := CONCAT('gotoPoint ',temp3);
bRequestStatus := FALSE; //don't allow requesting status this cycle in case they overlapped


bCallingMethods := TRUE;


goToPoint := TRUE; //function returns false after execution]]></ST>
      </Implementation>
    </Method>
    <Method Name="shutdown" Id="{9a75acf4-8ad8-45e2-8a57-a40dffd414a1}">
      <Declaration><![CDATA[//This method is called to give the shutdown command to the mobile robot. 
{attribute 'TcRpcEnable':='1'}
METHOD shutdown : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbSocketLD.bStartWritingString := TRUE;
GVL_MobileManipulator.statusWriteLD := 'shutdown';
bRequestStatus := FALSE; //don't allow requesting status this cycle in case they overlapped
bCallingMethods := TRUE;


shutdown := FALSE; //function returns false after execution]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_HandleRobotLD">
      <LineId Id="477" Count="6" />
      <LineId Id="607" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="618" Count="2" />
      <LineId Id="614" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="485" Count="67" />
      <LineId Id="152" Count="0" />
    </LineIds>
    <LineIds Name="FB_HandleRobotLD.getRobotIP">
      <LineId Id="7" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="51" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_HandleRobotLD.goToPoint">
      <LineId Id="52" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="29" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_HandleRobotLD.shutdown">
      <LineId Id="6" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>