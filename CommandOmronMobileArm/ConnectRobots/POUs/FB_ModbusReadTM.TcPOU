<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_ModbusReadTM" Id="{7ca8ad82-8659-44a0-b07b-d4c38c3f2a1f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ModbusReadTM
VAR_INPUT
	nMBAddr2	: WORD := 16#1C21; 
	nMBAddr4	: WORD := 16#1B59; 
END_VAR
VAR_OUTPUT
	fX : REAL; 
	fY : REAL; 
	fZ : REAL; 
	fRX : REAL; 
	fRY : REAL; 
	fRZ : REAL; 
	
	fTheta1 : REAL;
	fTheta2 : REAL;
	fTheta3 : REAL;
	fTheta4 : REAL;
	fTheta5 : REAL;
	fTheta6 : REAL;
	
	bError : BOOL;
	bProjectRunning : BOOL;
END_VAR
VAR
	arrTemp : ARRAY [0..1] OF WORD;
	
	//Modbus Variables - FC:2 Read Inputs
	fbRead2				: FB_MBReadInputs;
	bStart2				: BOOL;
	arrReadInputs 		: ARRAY [0..1] OF BYTE;
	nquantity2			: WORD := INT_TO_WORD(SIZEOF(arrReadInputs)/2);
	bBusy2				: BOOL;
	bError2				: BOOL;
	nErrId2				: UDINT;
	cbRead2				: UDINT;
	
	//Modbus Variables - FC:4 Read Input Registers
	fbRead4				: FB_MBReadInputRegs;
	bStart4				: BOOL;
	arrReadRegisters 	: ARRAY [0..23] OF WORD;
	nQuantity4			: WORD := INT_TO_WORD(SIZEOF(arrReadRegisters)/2);
	bBusy4				: BOOL;
	bError4				: BOOL;
	nErrId4				: UDINT;
	cbRead4				: UDINT;
	
	//General TM5 Modbus variables
	sIPAddr				: STRING(15) := GCL_ModbusTcp.cIPAddr;
	nTCPPort			: UINT := GCL_ModbusTcp.cTCPPort;
	nUnitID				: BYTE := GCL_ModbusTcp.cUnitID;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

(*---------------Modbus function 2 - ReadInputs---------------*)
IF NOT bstart2 THEN	
	bStart2 := TRUE;
	fbRead2.bExecute := TRUE;
ELSE
	IF NOT fbRead2.bBUSY THEN
		bStart2 := FALSE;
	END_IF
	fbRead2.bExecute := FALSE;
END_IF
fbRead2(sIPAddr:= sIPAddr, nTCPPort:= nTCPPort, nUnitID:= nUnitID, nQuantity:= nQuantity2, nMBAddr:= nMBAddr2, cbLength:= SIZEOF(arrReadInputs) , 
	pDestAddr:= ADR(arrReadInputs), bExecute:= bStart2 , tTimeout:= T#1S, bBusy=>bBusy2, bError=> bError4, nErrId=> nErrId2, cbRead=> cbRead4 );
(*---------------END OF Modbus function 2 - ReadInputs---------------*)


(*---------------Modbus function 4 - ReadInputRegs---------------*)
IF NOT bstart4 THEN	
	bStart4 := TRUE;
	fbRead4.bExecute := TRUE;
ELSE
	IF NOT fbRead4.bBUSY THEN
		bStart4 := FALSE;
	END_IF
	fbRead4.bExecute := FALSE;
END_IF
fbRead4(sIPAddr:= sIPAddr, nTCPPort:= nTCPPort, nUnitID:= nUnitID, nQuantity:= nQuantity4, nMBAddr:= nMBAddr4, cbLength:= SIZEOF(arrReadRegisters) , 
	pDestAddr:= ADR(arrReadRegisters), bExecute:= bStart4 , tTimeout:= T#1S, bBusy=>bBusy4, bError=> bError4, nErrId=> nErrId4, cbRead=> cbRead4 );
(*---------------END OF Modbus function 4 - ReadInputRegs---------------*)
	

(*---------------Extract Read Inputs (Error, Project Running) ---------------*)
//bError := arrReadRegisters[0];
//bProjectRunning := arrReadRegisters[1];
(*---------------END OF Extract Read Inputs---------------*)


(*---------------Extract Read Input Registers (Cartesian and Joint Space Positions) ---------------*)
arrTemp[1] := arrReadRegisters[0];
arrTemp[0] := arrReadRegisters[1];
MEMCPY(ADR(fX), ADR(arrTemp), 4);  //xPos
arrTemp[1] := arrReadRegisters[2];
arrTemp[0] := arrReadRegisters[3];
MEMCPY(ADR(fY), ADR(arrTemp), 4);  //yPos
arrTemp[1] := arrReadRegisters[4];
arrTemp[0] := arrReadRegisters[5];
MEMCPY(ADR(fZ), ADR(arrTemp), 4);  //zPos
arrTemp[1] := arrReadRegisters[6];
arrTemp[0] := arrReadRegisters[7];
MEMCPY(ADR(fRX), ADR(arrTemp), 4);  //xRot
arrTemp[1] := arrReadRegisters[8];
arrTemp[0] := arrReadRegisters[9];
MEMCPY(ADR(fRY), ADR(arrTemp), 4);  //yRot
arrTemp[1] := arrReadRegisters[10];
arrTemp[0] := arrReadRegisters[11];
MEMCPY(ADR(fRZ), ADR(arrTemp), 4);  //zRot
arrTemp[1] := arrReadRegisters[12];
arrTemp[0] := arrReadRegisters[13];
MEMCPY(ADR(fTheta1), ADR(arrTemp), 4);  // joint 1
arrTemp[1] := arrReadRegisters[14];
arrTemp[0] := arrReadRegisters[15];
MEMCPY(ADR(fTheta2), ADR(arrTemp), 4);  // joint 2
arrTemp[1] := arrReadRegisters[16];
arrTemp[0] := arrReadRegisters[17];
MEMCPY(ADR(fTheta3), ADR(arrTemp), 4);  // joint 3
arrTemp[1] := arrReadRegisters[18];
arrTemp[0] := arrReadRegisters[19];
MEMCPY(ADR(fTheta4), ADR(arrTemp), 4);  // joint 4
arrTemp[1] := arrReadRegisters[20];
arrTemp[0] := arrReadRegisters[21];
MEMCPY(ADR(fTheta5), ADR(arrTemp), 4);  // joint 5
arrTemp[1] := arrReadRegisters[22];
arrTemp[0] := arrReadRegisters[23];
MEMCPY(ADR(fTheta6), ADR(arrTemp), 4);  // joint 6
(*---------------END OF Extract Read Input Registers---------------*)
]]></ST>
    </Implementation>
    <LineIds Name="FB_ModbusReadTM">
      <LineId Id="123" Count="13" />
      <LineId Id="118" Count="0" />
      <LineId Id="121" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="52" Count="10" />
      <LineId Id="116" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="66" Count="2" />
      <LineId Id="70" Count="2" />
      <LineId Id="74" Count="2" />
      <LineId Id="78" Count="2" />
      <LineId Id="82" Count="2" />
      <LineId Id="86" Count="2" />
      <LineId Id="90" Count="2" />
      <LineId Id="94" Count="2" />
      <LineId Id="98" Count="2" />
      <LineId Id="102" Count="2" />
      <LineId Id="106" Count="2" />
      <LineId Id="110" Count="1" />
      <LineId Id="64" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="138" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>