<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_SocketLD" Id="{7bd1ae85-f4f4-4c52-8385-83b6ac5bfb84}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SocketLD
VAR_INPUT
	//sWriteData : STRING :='';
END_VAR
VAR_OUTPUT
	//sReceivedCommands : STRING;
END_VAR
VAR
	eState: E_DataExchangeLD;
	kaanReceivedBytes : INT;
	
	//FB_SocketCloseAll 
	fbCloseAll		: FB_SocketCloseAll;
	bInitialize		: BOOL := TRUE;
	
	//FB_SocketConnect
	fbSocketConnect: FB_SocketConnect;
	bBusyConnect : BOOL;
	bErrorConnect : BOOL;
	hSocketConnect: Tc2_TcpIp.T_HSOCKET;
	nErrIdConnect: UDINT;
	bStart : BOOL:=TRUE;
	
	//FB_SocketReceive
	fbSocketReceive : FB_SocketReceive;
	arrDataReceive : ARRAY [0..7679] OF BYTE;
	bBusyReceive: BOOL;
	bErrorReceive: BOOL;
	nErrIdReceive: UDINT;
	nRecBytes: UDINT;
	
	//FB_SocketSend
	fbSocketSend : FB_SocketSend;
	arrDataSend : ARRAY [0..255] OF BYTE;
	bBusySend: BOOL;
	bErrorSend: BOOL;
	nErrIdSend: UDINT;
	
	//Connection Variables
	sSrvNetID		: T_AmsNetID	:= GCL_TcpIp.sSrvNetID;
	sRemoteHost 	: T_IPv4Addr := GCL_TcpIp.sRemoteHost;
	nRemotePort 	: UDINT:=GCL_TcpIp.nRemotePort;
	
	
	//Internal variables 
	i: INT;
	j : INT;
	k : INT;
	m : INT;
	arrTmp : ARRAY [0..255] OF BYTE;
	sTmpMsg1 : STRING(255);
	sTmpMsg : T_MaxString;
	sTmpReceived : STRING(7680);
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE eState OF
	IDLE:	
		(*--------------- On PLC close all previous connections ---------------*)
		fbCloseAll( sSrvNetID := sSrvNetID, bExecute:= bInitialize );
		IF fbCloseAll.bBusy OR fbCloseAll.bError THEN
			RETURN; // i don't like return
		END_IF
		bInitialize := FALSE;
		eState := ConnectServer;
		
		
	
	ConnectServer:
	
		(*--------------- Connect to the server  ---------------*)
		fbSocketConnect(
			sSrvNetID:=sSrvNetID, sRemoteHost:=sRemoteHost, nRemotePort:= nRemotePort, bExecute := TRUE, tTimeout := T#1S,
			bBusy => bBusyConnect, bError => bErrorConnect, nErrId => nErrIdConnect, hSocket => hSocketConnect);
		IF NOT fbSocketConnect.bBusy AND NOT fbSocketConnect.bError THEN
			fbSocketConnect.bExecute := FALSE;
			eState := ExchangeData;
		ELSIF fbSocketConnect.bError THEN
			eState := ERROR;
		END_IF
		IF fbSocketConnect.bBusy THEN
			eState := IDLE;
		END_IF
				
	ExchangeData:
	
		(*--------------- Get LD-90 String Commands ---------------*)
		
		
		//Receive Data
		fbSocketReceive(
			sSrvNetID :=sSrvNetID, hSocket := hSocketConnect, cbLen := SIZEOF(arrDataReceive), pDest := ADR(arrDataReceive), bExecute := TRUE, tTimeout := T#1S,
			bBusy => bBusyReceive, bError => bErrorReceive, nErrId => nErrIdReceive, nRecBytes => nRecBytes);
			
		
		IF NOT fbSocketReceive.bBusy THEN
			fbSocketReceive(bExecute := FALSE);
		END_IF
			
		IF fbSocketReceive.bError THEN
			eState := ERROR;
			kaanReceivedBytes := 3;
		END_IF
		IF fbSocketReceive.nRecBytes > 2 THEN
			//kaanReceivedBytes := UDINT_TO_INT(fbSocketReceive.nRecBytes);
			sTmpReceived := '';
			FOR i:=0 TO 28 DO
				FOR j:= 0 TO 255 DO
					arrTmp[j] := arrDataReceive[i*256 + j];
				END_FOR
				sTmpMsg :=  BYTEARR_TO_MAXSTRING(arrTmp);
				CONCAT2(ADR(sTmpReceived), ADR(sTmpMsg),ADR(sTmpReceived), SIZEOF(sTmpReceived)-1);
			END_FOR
			GVL_MobileManipulator.statusReceivedLD := sTmpReceived;
			
			//update the command window for all except status 
			IF NOT (LEFT(GVL_MobileManipulator.statusReceivedLD,6) = 'Status') THEN
				GVL_CommandWindow.sReceivedCommands := GVL_MobileManipulator.statusReceivedLD;
			END_IF
			
				
		END_IF
					
		
		(*--------------- Set LD-90 String Command ---------------*)
		IF GVL_MobileManipulator.bStartLD THEN
			GVL_MobileManipulator.bStartLD := FALSE;
			MEMSET(ADR(arrDataReceive), 0 , SIZEOF(arrDataReceive)-1);
			MEMSET(ADR(arrDataSend),16#00,SIZEOF(arrDataSend));
			MEMSET(ADR(arrTmp),16#00,SIZEOF(arrTmp));
			arrDataSend[SIZEOF(arrDataSend) - 1] := 16#00;
			sTmpMsg1 := CONCAT(GVL_MobileManipulator.statusWriteLD, '$0A');
			arrTmp := MAXSTRING_TO_BYTEARR(sTmpMsg1);
			FOR k:=0 TO UINT_TO_INT(SIZEOF(arrDataSend))-1 DO
				IF k < UINT_TO_INT(SIZEOF(arrTmp)) THEN
					arrDataSend[k] := arrTmp[k];
				ELSE
					arrDataSend[k] := 16#00;
				END_IF
			END_FOR
			fbSocketSend.bExecute := TRUE;	
		END_IF
		
		fbSocketSend(
				sSrvNetID :=sSrvNetID, hSocket := hSocketConnect, cbLen := INT_TO_UDINT(LEN(sTmpMsg1)), pSrc := ADR(arrDataSend), tTimeout := T#1S,
				bBusy => bBusySend, bError => bErrorSend, nErrId => nErrIdSend);
		
			
				
		IF NOT fbSocketSend.bBusy THEN
			fbSocketSend(bExecute:=FALSE);
		END_IF
		
		IF fbSocketSend.bError THEN
			eState := ERROR;
			kaanReceivedBytes := 4;
		END_IF
			
	Succeed:
		kaanReceivedBytes:= 5;//here we could allow the other robot to start moving 
	ERROR:
		i := 2;//NOT GOOD, replace later
END_CASE


]]></ST>
    </Implementation>
    <LineIds Name="FB_SocketLD">
      <LineId Id="1522" Count="0" />
      <LineId Id="1521" Count="0" />
      <LineId Id="321" Count="8" />
      <LineId Id="443" Count="1" />
      <LineId Id="330" Count="20" />
      <LineId Id="1046" Count="1" />
      <LineId Id="351" Count="2" />
      <LineId Id="691" Count="0" />
      <LineId Id="354" Count="6" />
      <LineId Id="1292" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="930" Count="0" />
      <LineId Id="759" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="687" Count="2" />
      <LineId Id="685" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="686" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="1464" Count="1" />
      <LineId Id="1462" Count="1" />
      <LineId Id="1461" Count="0" />
      <LineId Id="1179" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="918" Count="0" />
      <LineId Id="762" Count="0" />
      <LineId Id="367" Count="1" />
      <LineId Id="841" Count="0" />
      <LineId Id="767" Count="0" />
      <LineId Id="1181" Count="0" />
      <LineId Id="763" Count="0" />
      <LineId Id="1108" Count="0" />
      <LineId Id="990" Count="0" />
      <LineId Id="371" Count="1" />
      <LineId Id="853" Count="1" />
      <LineId Id="1165" Count="0" />
      <LineId Id="1163" Count="0" />
      <LineId Id="856" Count="1" />
      <LineId Id="855" Count="0" />
      <LineId Id="373" Count="6" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1237" Count="0" />
      <LineId Id="380" Count="2" />
      <LineId Id="849" Count="0" />
      <LineId Id="846" Count="1" />
      <LineId Id="1293" Count="0" />
      <LineId Id="845" Count="0" />
      <LineId Id="383" Count="5" />
      <LineId Id="111" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>